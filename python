# security
#转义字符
  1、借助反斜杠字符，一旦字符串出现反斜杠，则反斜杠后面的几个字符表示已经不是原来的意思，进行了转义，比如回车、换行、退格
  2、不同的系统对回车换行等转义字符的理解不同
  Windows:\r
  Linux :\r\n

#字符串的格式化
  把字符串按照一定的格式打印或者填充
  格式化的两种方法
  1、利用百分号%
  2、利用format函数
    在字符串中，利用%标示一个特殊的字符，标示对字符串的格式化
      %d：此处标示应该放入一个整数
      %s：标示此处应该放入一个字符串
    多字字符串格式化中间采用,号隔开
	    s = "i\'m %s %d years old "
	    print (s %("xiaox",18)) 
  format函数进行格式化字符串
  采用{}和：替换%号，后面用format参数完成
    s = "i\'m {0} {1} years old ".format("xiaox",18)
    print (s)
  上述代码中的0.1标示format中参数的顺序

#NONE
  标示什么都没有
  如果函数没有返回值，可以返回none
  用来占位置
  用来接触标量绑定

#表达式
  一个或者几个数字或者变量和运算符组合成的一行代码
  运算符
  一个以上的值经过变化得到新的值
分类
	算数运算
	比较运算
	赋值运算
	逻辑运算
	位运算
	成员运算
	身份运算
	
  (1)%取余
    A = 9%4
    Print(a)
    **标示幂运算9的3次方
    A = 9**3 

  (2)比较运算，结果为布尔型
    a = 3**4
    b = a==80
    print(b)

  (3)逻辑运算
    and看做是乘法 or加法
    true为1 flase为0
    逻辑运算，按照运算的顺序，一旦能够确定整个式子的未来的值则不在进行计算，直接返回
    A = Ttrue or xxxxxx

  (4)成员运算 
    用来检测一个变量是否是另外一个变量的成员
    In、not in

  (5)身份运算
    Is 用来检测量变量是否是相同的变量
	   Var is Var2
     Is not 标示两个变量不是同一个变量

#循环语句
for循环while循环
For 变量 in 序列：
	语句1
	语句2
	。。。
列表就是一系列的数字或者其他值，一般用中括号标示
例如{"a","b","c"}

Range 生成一个数字序列
For I in range(1,10)
For-else语句
for循环结束的时候，会执行else语句

break：无条件结束整个循环
Continue：无天健结束本次循环，从新进入下轮循环
pass：标示略过，也可以用于占位

while循环
表示当某个条件成立的时候就循环
不知道具体的循环次数，但能确定循环的成立条件的时候while循环
While 条件表达式：
	语句块

#函数
形参：在函数定义的时候用到的参数没有具体的值
实参：函数的实际参数

Def 函数名（参数，参数。。）

调用
函数名（值，值。。）
调用的视乎具体值的参考是位置，按照位置赋值

#关键参数
Def func（p1=v1,p2=v2..）

调用
func（p1=value1,p2=value2…）

#收集参数
把没有位置，不能和定义时的参数位置相对应的参数，放入一个特定的数据结构中

	Def func（*args）:
		Func body
		按照list使用方式访问args得到传入的参数
		
	调用：
	func（p1,p2,p3…）

#收集参数之关键字收集参数
Def func（**key）：
调用
Func(p1=v1,p2=v2….)

